function Get-RDMDisk
{
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true,
        ParameterSetName     = 'VMName')]
        [System.String[]] 
        $VMName,

        [Parameter(Mandatory = $true,
        ValueFromPipeline    = $true,
        ParameterSetName     = 'VMObject')]
        [VMware.VimAutomation.ViCore.Types.V1.Inventory.VirtualMachine[]]
        $VM,

        [System.String] 
        $ReportPath
    )

    begin
    {
        Write-Verbose "$(Get-Date) Get-RDMDisk    Started execution"
        
        [System.Collections.ArrayList]$alReport = [System.Collections.ArrayList]::New()
        [System.Array]$vmList                   = @()
        [System.String]$strRoundRobin           = 'Round Robin'
        [System.String]$strMRU                  = 'Most Recently Used'
    }

    process
    {
        switch ($PSCmdlet.ParameterSetName)
        {
            'VMName'   {$vmList = $VMName}
            'VMObject' {$vmList = $VM}
        }

        Write-Debug "$(Get-Date) Get-RDMDisk    ParameterSetName - $($PSCmdlet.ParameterSetName)"
        
        foreach ($vmItem in $vmList)
        {
            [System.String]$projectName = ''
            
            switch ($vmItem.GetType().Name)
            {
                'UniversalVirtualMachineImpl' {$vmView = Get-View -Id $vmItem.Id | Where-Object {$_.Name -like $vmItem.Name}}
                'String'                      {$vmView = Get-View -ViewType VirtualMachine -Filter @{"Name" = $vmItem} | Where-Object {$_.Name -like $vmItem}}
            }

            Write-Verbose "$(Get-Date) Get-RDMDisk    Started collect data about VM $($vmView.Name)"
            
            $hostView       = Get-View -Id $vmView.Runtime.Host
            $clusterView    = Get-View -Id $hostView.Parent
            $datacenterView = $clusterView
            do
            {
                $datacenterView = Get-View -Id $datacenterView.Parent
            }
            while ($datacenterView.MoRef.Type -ne 'Datacenter' -and $datacenterView)

            $hostLun = $hostView.Config.StorageDevice.ScsiLun
            $hostMP  = $hostView.Config.StorageDevice.MultipathInfo.Lun
            
            $hddList = $vmView.Config.Hardware.Device | Where-Object {$_.GetType().Name -match 'VirtualDisk'} | Where-Object {$_.Backing.GetType().Name -match 'VirtualDiskRaw'}
            $osName  = $vmView.Config.GuestFullName

            $projectKey  = ($vmView.AvailableField | Where-Object {$_.Name -like 'ProjectName'}).Key
            $projectName = ($vmView.Summary.CustomValue | Where-Object {$_.Key -like $projectKey}).Value
            
            if (!($projectName))
            {
                $projectName = $datacenterView.Name
            }

            if ($hddList.Count -eq 0)
            {
                Write-Verbose "$(Get-Date) Get-RDMDisk    VM $($vmView.Name) has no RDM disks"
            }
            else
            {
                foreach ($hdd in $hddList)
                {                    
                    Write-Verbose "$(Get-Date) Get-RDMDisk    Started collect data about RDM disk $($hdd.DeviceInfo.Label) on VM $($vmView.Name)"
                    
                    $lun            = $hostLun | Where-Object {$_.Uuid -like $hdd.Backing.LunUuid}
                    $lunID          = ($hostMP | Where-Object {$_.Lun -eq $lun.Key}).Path[0].Name.Split(',')[0].Split(':')[-1].Replace('L','')
                    $lunMPShortName = ($hostMP | Where-Object {$_.Lun -eq $lun.Key}).Policy.Policy.Split('_')[-1]
                    
                    switch ($lunMPShortName)
                    {
                        'RR' {$lunMPFullName = $strRoundRobin}
                        'MRU'{$lunMPFullName = $strMRU}
                    }
                    
                    $fileName           = $hdd.Backing.FileName.Split(' ')[-1]
                    $datastoreName      = $hdd.Backing.FileName.Split(' ')[0].Replace('[','').Replace(']','')
                    $scsiControllerKey  = $hdd.ControllerKey
                    $scsiControllerView = $vmView.Config.Hardware.Device | Where-Object {$_.Key -like $scsiControllerKey}

                    $htReport = [PSCustomObject][Ordered]@{VM_NAME              = $vmView.Name
                                                           HOST_NAME            = $hostView.Name
                                                           CLUSTER_NAME         = $clusterView.Name
                                                           DATACENTER_NAME      = $datacenterView.Name
                                                           PROJECT              = $projectName
                                                           OS                   = $osName
                                                           SCSI_CONTROLLER_NAME = $scsiControllerView.DeviceInfo.Label
                                                           HDD_UNIT_NUMBER      = $hdd.UnitNumber
                                                           CANONICAL_NAME       = $lun.CanonicalName                                                     
                                                           LUN_ID               = $lunID
                                                           LUN_VENDOR           = $lun.Vendor
                                                           LUN_MODEL            = $lun.Model
                                                           MP_POLICY            = $lunMPFullName
                                                           HDD_CAPACITY_GB      = [System.Math]::Round($hdd.CapacityInKB / 1MB, 2)
                                                           HDD_TYPE             = $hdd.Backing.CompatibilityMode.Replace('Mode','')
                                                           HDD_NAME             = $hdd.DeviceInfo.Label
                                                           DATASTORE_NAME       = $datastoreName
                                                           FILE_NAME            = $fileName
                                                           STORAGE_DEVICE_NAME  = $lun.DisplayName}
                    $alReport.Add($htReport) | Out-Null

                    Write-Verbose "$(Get-Date) Get-RDMDisk    Finished collect data about RDM disk $($hdd.DeviceInfo.Label) on VM $($vmView.Name)"
                }

                Write-Verbose "$(Get-Date) Get-RDMDisk    Finished collect data about VM $($vmView.Name)"                    
            }
        }

        if ($PSBoundParameters.ContainsKey('ReportPath') -and ($alReport.Count -ne 0))
        {
            try
            {
                Write-Verbose "$(Get-Date) Get-RDMDisk    Started export to file $ReportPath"

                $alReport | Export-Csv -Path $ReportPath -NoTypeInformation -Encoding UTF8 -Delimiter ';'

                Write-Verbose "$(Get-Date) Get-RDMDisk    Finished export to file $ReportPath"
            }
            catch
            {
                Write-Verbose "$(Get-Date) Get-RDMDisk    Failed export to file $ReportPath"

                Write-Warning $Error[0].FullyQualifiedErrorId
            }        
        }
        else
        {
            Write-Verbose "$(Get-Date) Get-RDMDisk    There are no RDM disks on the input VMs. Generating the report is skiping"
        }           
        
        $alReport
    }

    end
    {
        Write-Verbose "$(Get-Date) Get-RDMDisk    Finished execution"

        $alReport.Clear()
    }
}

function Find-HostBySerialNumber
{
    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)]
        [System.String[]] 
        $SerialNumber
    )

    begin
    {
        Write-Verbose "$(Get-Date) Find-HostBySerialNumber    Started execution"
        
        [System.Collections.ArrayList]$alReport = [System.Collections.ArrayList]::New()
    }

    process
    {
        $vmHostViewList = Get-View -ViewType HostSystem -Property Hardware.SystemInfo.OtherIdentifyingInfo
        
        foreach ($vmHostView in $vmHostViewList)
        {
            [System.String]$findedSN = ''
            $findedSN = ($vmHostView.Hardware.SystemInfo.OtherIdentifyingInfo | Where-Object {$_.IdentifierType.Key -like 'EnclosureSerialNumberTag'}).IdentifierValue
            
            foreach ($item in $SerialNumber)
            {
                if ($findedSN -like $item)
                {
                    $findedVmHost = Get-View -Id $vmHostView.MoRef
                    $htReport = [PSCustomObject][Ordered]@{HOST_NAME          = $findedVmHost.Name
                                                           POWER_STATE        = $findedVmHost.Runtime.PowerState
                                                           CONNECTION_STATE   = $findedVmHost.Runtime.ConnectionState
                                                           IN_MANTENANCE_MODE = $findedVmHost.Runtime.InMaintenanceMode
                                                           SERIAL_NUMBER      = $item}
                    $alReport.Add($htReport) | Out-Null
                }    
            }
        }

        $alReport
    }
    
    end
    {
        Write-Verbose "$(Get-Date) Find-HostBySerialNumber     Finished execution"

        $alReport.Clear()
    }
}

function Find-VMbyIP
{
[CmdletBinding()]
    param (
        [Parameter(Mandatory = $true)]
        [System.String[]] 
        $IPAddress
    )

    begin
    {
        Write-Verbose "$(Get-Date) Find-VMbyIP    Started execution"
        
        [System.Collections.ArrayList]$alReport = [System.Collections.ArrayList]::New()
    }

    process
    {        
        $vmViewList = Get-View -ViewType VirtualMachine -Property Guest.Net
        foreach ($vmView in $vmViewList)
        {
            foreach ($netAdapter in $vmView.Guest.Net)
            {
                foreach ($ip in $netAdapter.IpConfig.IpAddress)
                {                        
                    foreach ($item in $IPAddress)
                    {
                        if ($ip.IpAddress -like $item)
                        {
                            $findedVm = Get-View -Id $vmView.MoRef
                            $htReport = [PSCustomObject][Ordered]@{HOST_NAME   = $findedVm.Name
                                                                   POWER_STATE = $findedVm.Runtime.PowerState
                                                                   IP_ADDRESS  = $item}
                            $alReport.Add($htReport) | Out-Null
                        }
                    }
                }
            }
        }

        $alReport
    }

    end
    {
        Write-Verbose "$(Get-Date) Find-VMbyIP     Finished execution"

        $alReport.Clear()
    }
}
